# 字典
# d = {key1 : value1, key2 : value2}
# 键必须是唯一的，但值则不必
# 值可以取任何数据类型，但键必须是不可变的，如字符串、数字或元组
dict = {'Alice' : '2341', 'Beth' : '9102', 'Cecil' : '3258'}

# 访问字典里的值
dict = {'Name' : 'Runoob', 'Age' : 7, 'Class' : 'First'}

print ("dict['Name']：", dict['Name'])
print ("dict['Age']：", dict['Age'])

# print ("dict['Alice']：",dict['Alice'])

# 修改字典
dict = {'Name' : 'Runoob', 'Age' : 7, 'Class' : 'First'}

dict['Age'] = 8                 # 更新 Age
dict['School'] = "菜鸟教程"      # 添加信息

print ("dict['Age']：",dict['Age'])
print ("dict['School']：",dict['School'])

# 删除字典元素
dict = {'Name' : 'Runoob', 'Age' : 7, 'Class' : 'First'}

del dict['Name'] #删除键 'Name'
dict.clear()     #清空字典
del dict         #删除字典

# 字典键的特性
# (1)不允许同一个键出现两次，创建时如果同一个键被赋值两次，后一个值会被记住
# (2)键必须不可变，所以可用用数字、字符串或者元组充当，而用列表就不行

# 字典内置函数&方法
# len(dict) 计算字典元素的个数，即键的总数
# str(dict) 输出字典，以可打印的字符串表示
# type(dict) 返回输出的变量类型，如果变量是字典就返回字典类型

# radiansdict.clear() 删除字典内的元素
# radiansdict.copy() 返回一个字典的浅复制
# radiansdict.get(key.default=None) 返回指定键的值，如果值不在字典中返回default值
# key in dict 如果键在字典dict里返回true，否则返回false
# radiansdict.items() 以列表返回可遍历的（键，值）元组数组
# radiansdict.keys() 返回一个迭代器，可以使用list()来转换为列表
# radiansdict.setdefault(key.default=None) 和 get()类似，但如果键不存在于字典中，将会添加键并将值设置为default
# radiansdict.update(dict2) 把字典dict2的键/值对更新到dict里
# radiansdict.values() 返回一个迭代器，可以用list()来转换成列表
# pop(key[,default]) 删除字典给定键key所对应的值，返回值为被删除的值，key必须给出，否则，返回default值
# popitem() 随机返回并删除字典中的一对键和值（一般删除末尾对）


# 集合（set）是一个无序的不重复元素序列
# 可以使用大括号{}或者set()函数创建集合，注意：创建一个空集合必须用set()，{}是用来创建一个空字典
# parame = {value1,value2,...}
# 或者
# set(value)

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)
# 'orange' in basket        true
# 'crabgrass' in basket     false

a = set('abracadatra')
b = set('alacazam')

print(a)
print(b)
print(a-b)
print(a|b)
print(a&b)
print(a^b)

# 添加元素
# s.add(x) # 将元素X添加到集合s中，如果元素已存在，则不进行任何操作
thisset = set(("Google", "Runoob", "Taobao"))
thisset.add("Facebook")
print(thisset)

# 还有个方法，也可以添加元素，且参数可以是列表、元组、字典等，语法格式如下
# s.update(x)
thisset = set(("Google", "Runoob", "Taobao"))
thisset.update({1,3})
print(thisset)
thisset.update([1,4],[5,6])
print(thisset)

# 移除元素
# s.remove(x)
thisset = set(("Google", "Runoob", "Taobao"))
thisset.remove("Taobao")
print(thisset)
# 此处还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误
# s.discard(x)
thisset = set(("Google", "Runoob", "Taobao"))
thisset.discard("Facebook")
print(thisset)
# 我们也可以设置随机删除集合中的一个元素，语法格式如下
# s.pop()
thisset = set(("Google", "Runoob", "Taobao", "Facebook"))
x = thisset.pop()
print(x)
# 然而在交互模式，pop是删除集合的第一个元素（排序后的集合的第一个元素）

# 计算集合元素个数
# len(s)
thisset = set(("Google", "Runoob", "Taobao"))
print(len(thisset))

# 清空集合
# s.clear()
thisset = set(("Google", "Runoob", "Taobao"))
thisset.clear()
print(thisset)

# 判断元素是否在集合中存在
# x in s
thisset = set(("Google", "Runoob", "Taobao"))
print("Runoob" in thisset)
print("Facebook" in thisset)

# 集合内置方法完整列表
# add() 为集合添加元素
# clear() 移除集合中的所有元素
# copy() 拷贝一个集合
# difference() 返回多个集合的差集
# difference_update() 移除集合中的元素，该元素在指定的集合也存在。
# discard() 删除集合中指定的元素
# intersection() 返回集合的交集
# intersection_update() 删除集合中的元素，该元素在指定的集合中不存在。
# isdisjoint() 判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
# issubset() 判断指定集合是否为该方法参数集合的子集。
# issuperset() 判断该方法的参数集合是否为指定集合的子集
# pop() 随机移除元素
# remove() 移除指定元素
# symmetric_difference() 返回两个集合中不重复的元素集合。
# symmetric_difference_update() 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
# union() 返回两个集合的并集
# update() 给集合添加元素

# 斐波那契数列
a, b = 0, 1
while b < 10:
    print(b)
    a, b = b, a+b